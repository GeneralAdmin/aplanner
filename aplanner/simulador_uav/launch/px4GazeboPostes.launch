<launch>

	
	
	<!-- .................. ..........  World data ....... .................. -->
    <arg name="world_file_name"    default="outWrldPostes" />
    <arg name="world_path" default="$(find simulador_uav)/worlds/$(arg world_file_name).world" />
    <arg name="pointcloud_topics" default="[/camera/depth/points]"/>
	
    <arg name="camera_frame_id" default="camera_link"/>
    <arg name="start_pos_x" default="0" />
    <arg name="start_pos_y" default="0" />
    <arg name="start_pos_z" default="0" />

	
    <arg name="frame_id"    default="local_origin" />
	
	<!-- .................. ..........  UAV data ....... .................. -->
    <arg name="gui" default="true"/>
    <arg name="ns" default="/"/>
    <arg name="model" default="iris_depth_camera"/>
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="gcs_url" default="" />   <!-- GCS link is provided by SITL -->
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />
    <arg name="vehicle" default="iris_obs_avoid"/>

    <param name="use_sim_time" value="true" />
	
	<!-- vehicle pose -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
	
	
	
	
	<!-- .................. ..........  Nodes data ....... .................. -->


    <!-- Define a static transform from a camera internal frame to the fcu for every camera used -->
       <node pkg="tf" type="static_transform_publisher" name="tf_depth_camera"
          args="0 0 0 -1.57 0 -1.57 fcu $(arg camera_frame_id) 10"/>
	
	<!-- .................. ..........  Acessorios ....... .................. -->

 <!-- Launch rqt_reconfigure -->
    <node pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen" name="rqt_reconfigure" />

	
	<!-- .................. ..........  MAVROS ....... .................. -->
	
	<!-- Launch PX4 SITL -->
    <include file="$(find px4)/launch/px4.launch">
        <arg name="vehicle" value="$(arg vehicle)"/>
    </include>

    <!-- Launch MavROS -->
    <group ns="$(arg ns)">
        <include file="$(find mavros)/launch/node.launch">
            <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
            <!-- Need to change the config file to get the tf topic and get local position in terms of local origin -->
            <arg name="config_yaml" value="$(find avoidance)/resource/px4_config.yaml" />
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs_url)" />
            <arg name="tgt_system" value="$(arg tgt_system)" />
            <arg name="tgt_component" value="$(arg tgt_component)" />
        </include>
    </group>
	
	
	
		
	<!-- .................. ..........  GAZEBO ....... .................. -->
	
	
	
	
    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world_path)" />
    </include>

    <!-- Spawn vehicle model -->
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-sdf -database $(arg model) -model $(arg vehicle)">
    </node>
	
	<!-- .................. ..........  planer ....... .................. -->
	
	
		
	<!-- .................. ..........  OctoMap ....... .................. -->
	
    <!-- OctoMap Server -->
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        <param name="resolution" value="1.0" />
        <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
        <param name="frame_id" type="string" value="$(arg frame_id)" />
        <!-- maximum range to integrate (speedup!) -->
        <param name="sensor_model/max_range" value="250.0" />
        <param name="sensor_model/min" value="0.01" />
        <param name="sensor_model/max" value="0.99" />
        <param name="sensor_model/hit" value="0.9" />
        <param name="sensor_model/miss" value="0.45" />
        <param name="color/r" value="0.1" />
        <param name="color/g" value="0.1" />
        <param name="color/b" value="0.1" />
        <param name="color/a" value="1.0" />
	<param name="occupancy_max_x" value="500" />
	<param name="occupancy_min_x" value="-500" />
	<param name="occupancy_max_y" value="500" />
	<param name="occupancy_min_y" value="-500" />
	<param name="occupancy_max_z" value="1000" />
	<param name="occupancy_min_z" value="-1000" />
   	<param name="pointcloud_min_x" value="-500.0" />
      	<param name="pointcloud_max_x" value="500.0" />
      	<param name="pointcloud_min_y" value="-500.0" />
      	<param name="pointcloud_max_y" value="500.0" />
	<param name="pointcloud_max_z" value="1000" />
	<param name="pointcloud_min_z" value="-1" />
	<param name="resolution" value="0.25" />
        <!-- Filter out obstacles which are lower than 1 meter -->
        <param name="height_map" value="false" />
        <param name="publish_free_space" value="false" />
        <!-- data source to integrate (PointCloud2) -->
        <!-- <remap from="cloud_in" to="$(arg point_cloud_topic)" /> -->
	<remap from="cloud_in" to="/local_pointcloud"/>
    </node>
	

	<!-- .................. ..........  continue ....... .................. -->

	<node pkg="rviz" type="rviz" output="screen" name="rviz" respawn="true"
          args="-d $(find global_planner)/resource/global_planner.rviz" />
  
</launch>
